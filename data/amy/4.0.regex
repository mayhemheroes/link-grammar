 %***************************************************************************%
 %                                                                           %
 %  Copyright (C) 2013 Linas Vepstas                                         %
 %  See file "LICENSE" for information about commercial use of this system   %
 %                                                                           %
 %***************************************************************************%

% The regexes here use the PCRE2 pattern syntax.
% The LG library must be configured with PCRE2 in order to use them.

% \X matches any Unicode grapheme.
% (?:(?=\p{Xan}) specifies that it should start with a letter or number.
% Similarly, \pM allows it to start with a mark character.
% Since most of the script-specific punctuation characters are not in
% the affix-punc file, they are allowed here to join to the end word/parts
% Most probably these regexes still reject valid word graphemes in some languages.
%
% For information on graphemes see: http://www.unicode.org/reports/tr29/

% Want to match apostrophes, for abbreviations (I'm I've, etc.) since
% these cannot be auto-split with the current splitter.
% Hyphenated words, and words with underbars in them, get split.
ANY-WORD:  /^(?=\p{Xan})\X(?:(?=\p{Xan}|\pM|\p{Po})\X)*$/
ANY-PUNCT: /^[[:punct:]]+$/

% Multi-part random morphology: match any string as prefix, stem, or
% suffix.
% \x03 matches the internal representation of the dot in STEMSUBSCR
% (See 4.0.affix).

MOR-STEM: /^(?=\p{Xan})\X(?:(?=\p{Xan}|\pM|\p{Po})\X)*\x03=$/
MOR-PREF: /^(?=\p{Xan})\X(?:(?=\p{Xan}|\pM|\p{Po})\X)*=$/
MOR-SUFF: /^=(?=\p{Xan})\X(?:(?=\p{Xan}|\pM|\p{Po})\X)*/

% For ASCII input, the following is enough (and it works even if the
% LG library is configured with a regex library other then PCRE2).
% To use it, uncomment it out and comment out the previous definitions.
% ANY-WORD: /^[[:alnum:]']+$/
% ANY-PUNCT: /^[[:punct:]]+$/
% MOR-PREF: /^[[:alnum:]']+=$/
% MOR-STEM: /^[[:alnum:]']+.=$/
% MOR-SUFF: /^=[[:alnum:]']+$/

% Match anything that doesn't match the above.
% Match anything that isn't white-space.
% Well ... actually, reject anything that contains
% punctuation. We do this, so that the tokenizer can split off the
% the affixes (trailing commas, etc) correctly.
JUNK: !/[[:punct:]]/
JUNK: /^/

% How to debug:
% link-parser amy -m -v=10 -debug=anysplit.c
% If needed, you can add to -debug (comma separated) one of more
% from the following: separate_word,regex-morph.c,read-regex.c
